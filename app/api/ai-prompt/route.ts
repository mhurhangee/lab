import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { prompt, context, selection } = await request.json()

    // Validate input
    if (!prompt || typeof prompt !== 'string') {
      return NextResponse.json(
        { error: 'Invalid prompt' },
        { status: 400 }
      )
    }

    // Construct the full prompt with context
    let fullPrompt = prompt
    if (context && context.trim()) {
      if (selection?.empty) {
        // No selection - use context for reference
        fullPrompt = `${prompt}\n\nContext: ${context}`
      } else {
        // Text is selected - operate on the selected text
        fullPrompt = `${prompt}\n\nText to work with: "${context}"`
      }
    }

    // TODO: Replace with your AI service (OpenAI, Anthropic, etc.)
    // Example with OpenAI:
    /*
    const response = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful writing assistant. Provide clear, concise responses that directly address the user\'s request.'
        },
        {
          role: 'user',
          content: fullPrompt
        }
      ],
      max_tokens: 500,
      temperature: 0.7
    })

    const result = response.choices[0]?.message?.content || 'No response generated'
    */

    // Placeholder response for now
    const result = `AI Response to: "${prompt}"\n\nThis is a placeholder response. In a real implementation, this would be generated by your AI service (OpenAI, Anthropic, etc.) based on the prompt: "${fullPrompt}"`

    return NextResponse.json({ result })
  } catch (error) {
    console.error('AI prompt API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}